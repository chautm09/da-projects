Table Schema: https://support.google.com/analytics/answer/3437719?hl=en
Format Element: https://cloud.google.com/bigquery/docs/reference/standard-sql/format-elements

-- Query 01: calculate total visit, pageview, transaction and revenue for Jan, Feb and March 2017 order by month
#standardSQL
SELECT 
  FORMAT_DATE("%Y%m", PARSE_DATE("%Y%m%d", date)) AS month,
  COUNT(fullVisitorId) AS visits,
  SUM(totals.pageviews) AS pageviews,
  SUM(totals.transactions) AS transactions,
  ROUND(SUM(totals.totalTransactionRevenue/1000000),2) AS revenue

FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`
WHERE _table_suffix between '0101'and '0331'
GROUP BY month
ORDER BY month


-- Query 02: Bounce rate per traffic source in July 2017
#standardSQL
SELECT 
  trafficSource.source,
  COUNT(fullVisitorId) AS total_visits,
  SUM(totals.bounces) AS total_no_of_bounces,
  SUM(totals.bounces)/ COUNT(fullVisitorId) *100 AS bounce_rate

FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*`
GROUP BY trafficSource.source
ORDER BY total_visits DESC

-- Query 3: Revenue by traffic source by week, by month in June 2017
WITH week_table AS(
  SELECT
    'Week' AS time_type,
    FORMAT_DATE('%Y%U', PARSE_DATE('%Y%m%d',date)) AS time,
    trafficSource.source AS source,
    ROUND(SUM(totals.totalTransactionRevenue/1000000),2) AS revenue
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201706*`
  GROUP BY time,trafficSource.source),

month_table AS(
  SELECT
    'Month' AS time_type,
    FORMAT_DATE('%Y%m', PARSE_DATE('%Y%m%d',date)) AS time,
    trafficSource.source AS source,
    ROUND(SUM(totals.totalTransactionRevenue/1000000),2) AS revenue
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201706*`
  GROUP BY time,trafficSource.source)

SELECT *
FROM week_table
UNION ALL
SELECT *
FROM month_table
ORDER BY revenue DESC

--Query 04: Average number of product pageviews by purchaser type (purchasers vs non-purchasers) in June, July 2017. Note: totals.transactions >=1 for purchaser and totals.transactions is null for non-purchaser
#standardSQL

WITH purchaser AS (
  SELECT 
    FORMAT_DATE('%Y%m', PARSE_DATE('%Y%m%d', date)) AS month,
     -- COUNT DISTINCT
    SUM(totals.pageviews) / COUNT(distinct fullVisitorId) AS avg_pageviews_purchase
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`
  WHERE _table_suffix BETWEEN '0601'AND '0731'
        AND totals.transactions >=1
  GROUP BY month),

non_purchaser AS (
  SELECT 
    FORMAT_DATE('%Y%m', PARSE_DATE('%Y%m%d', date)) AS month,
    -- COUNT DISTINCT
    SUM(totals.pageviews) / COUNT(distinct fullVisitorId) AS avg_pageviews_non_purchase
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`
  WHERE _table_suffix BETWEEN '0601'AND '0731'
        AND totals.transactions IS NULL
  GROUP BY month)

SELECT 
  p.month, 
  avg_pageviews_purchase, 
  avg_pageviews_non_purchase
FROM purchaser AS p
LEFT JOIN non_purchaser
USING (month)
ORDER BY month


-- Query 05: Average number of transactions per user that made a purchase in July 2017
#standardSQL
SELECT 
    FORMAT_DATE('%Y%m', PARSE_DATE('%Y%m%d', date)) AS month,
    SUM(totals.transactions) / COUNT(distinct fullVisitorId) AS Avg_total_transactions_per_user
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*`
WHERE totals.transactions >=1
GROUP BY month

-- Query 06: Average amount of money spent per session
#standardSQL
SELECT 
    FORMAT_DATE('%Y%m', PARSE_DATE('%Y%m%d', date)) AS month,
    SUM(totals.totalTransactionRevenue ) / COUNT (fullVisitorId) AS avg_revenue_by_user_per_visit
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*`
WHERE totals.transactions >=1
GROUP BY month


-- Query 07: Other products purchased by customers who purchased product "YouTube Men's Vintage Henley" in July 2017. Output should show product name and the quantity was ordered.
#standardSQL
SELECT 
    v2ProductName AS other_purchased_products,
    SUM(productQuantity) AS quantity
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*`,
UNNEST (hits) AS hits,
UNNEST (product) AS product
WHERE 
    productRevenue IS NOT NULL 
    AND v2ProductName <> "YouTube Men's Vintage Henley" 
    AND fullVisitorId IN (
      SELECT 
          distinct fullVisitorId
      FROM `bigquery-public-data.google_analytics_sample.ga_sessions_201707*`,
      UNNEST (hits) AS hits,
      UNNEST (product) AS product
      WHERE v2ProductName = "YouTube Men's Vintage Henley"
      and productRevenue IS NOT NULL)

GROUP BY v2ProductName
ORDER BY quantity DESC


--Query 08: Calculate cohort map from pageview to addtocart to purchase in last 3 month. For example, 100% pageview then 40% add_to_cart and 10% purchase.
#standardSQL
WITH 
num_product_view_table AS(
  SELECT 
    FORMAT_DATE("%Y%m", PARSE_DATE("%Y%m%d", date)) AS month,
    COUNT(hits.eCommerceAction.action_type) AS num_product_view
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`,
  UNNEST (hits) AS hits
  WHERE 
    _table_suffix between '0101'and '0331'
    AND hits.eCommerceAction.action_type = '2'
  GROUP BY month
  ORDER BY month),

num_addtocart_table AS(
  SELECT 
    FORMAT_DATE("%Y%m", PARSE_DATE("%Y%m%d", date)) AS month,
    COUNT(hits.eCommerceAction.action_type) AS num_addtocart
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`,
  UNNEST (hits) AS hits
  WHERE 
    _table_suffix between '0101'and '0331'
    AND hits.eCommerceAction.action_type = '3'
  GROUP BY month
  ORDER BY month),

num_purchase_table AS(
  SELECT 
    FORMAT_DATE("%Y%m", PARSE_DATE("%Y%m%d", date)) AS month,
    COUNT(hits.eCommerceAction.action_type) AS num_purchase
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_2017*`,
  UNNEST (hits) AS hits
  WHERE 
    _table_suffix between '0101'and '0331'
    AND hits.eCommerceAction.action_type = '6'
  GROUP BY month
  ORDER BY month)

SELECT 
  n.month,
  num_product_view,
  num_addtocart,
  num_purchase,
  ROUND(num_addtocart / num_product_view *100, 2) AS add_to_cart_rate,
  ROUND(num_purchase / num_product_view *100, 2) AS purchase_rate
FROM num_product_view_table AS n
INNER JOIN num_addtocart_table 
USING (month)
INNER JOIN num_purchase_table
USING (month)
ORDER BY month



